var searchIndex = JSON.parse('{\
"quartz":{"doc":"Quartz","t":[5,0,0,13,3,13,3,13,13,3,4,8,13,3,18,18,13,3,13,13,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["add_two","ir","prelude","Array","ArrayType","Bool","BoolType","Double","Float","FloatType","IEEEFloat","IRType","Int","IntType","MAX_WIDTH","MIN_WIDTH","Ptr","PtrType","Single","Struct","StructType","Type","TypeLayout","align","align_req","align_req","array","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","element_type","empty","empty_struct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","expect_array","expect_bool","expect_float","expect_int","expect_ptr","expect_struct","f32","f32","f64","f64","float","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_vec","hash","hash","hash","hash","hash","hash","hash","hash","hash","i16","i16","i32","i32","i64","i64","i8","i8","int","into","into","into","into","into","into","into","into","into","is_array","is_bool","is_empty","is_empty","is_float","is_i16","is_i32","is_i64","is_i8","is_int","is_ptr","is_struct","layout","layout","len","len","mask","members","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","ptr","real","sign_bit","size","size_req","size_req","structure","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap_array","unwrap_bool","unwrap_float","unwrap_int","unwrap_ptr","unwrap_struct","width","0","0","0","0","0","0"],"q":["quartz","","","quartz::irquartz::ir::Type","","","","",""],"d":["Adds two numbers together.","Quartz IR","Quartz Prelude","An array type of the form <code>[T; N]</code>.","Models the <code>[T; N]</code> compound type.","A boolean type.","Models the <code>bool</code> fundamental type.","Models <code>f64</code>, an IEEE double-precision float (<code>binary64</code>).","An IEEE floating-point type of some width.","Models the <code>fN</code> class of fundamental types.","Maps the hardware representation of the floating-point …","Models the accessible operations on any given type.","A raw integer type of some width.","Models the <code>iN</code> class of fundamental types.","The maximum bit-width of an integer type.","The minimum bit-width of an integer type.","The <code>ptr</code> type, equivalent to C’s <code>void*</code>.","Models the <code>ptr</code> fundamental type.","Models <code>f32</code>, an IEEE single-precision float (<code>binary32</code>).","A structure type of the form <code>{ T... }</code>.","Models the <code>{ T... }</code> compound type.","A single type in QIR.","Models the layout requirements of a given type.","Gets the alignment requirement of the type, in bytes.","Gets the size (in bytes) of the types. If the type is …","Gets the size (in bytes) of the types. If the type is …","Creates a new <code>[T; N]</code> type. Equivalent to …","Creates a new <code>bool</code> type. Equivalent to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the type of the array, i.e. returns the <code>T</code> in <code>[T; N]</code>.","Creates an empty struct type, i.e. <code>{ }</code>.","Creates the empty <code>{ }</code> type. Equivalent to …","","","","","","","","","","","","","","","","Checks if the current variant is <code>Array</code>. If it is, it …","Checks if the current variant is <code>Bool</code>. If it is, it …","Checks if the current variant is <code>Float</code>. If it is, it …","Checks if the current variant is <code>Int</code>. If it is, it returns …","Checks if the current variant is <code>Ptr</code>. If it is, it returns …","Checks if the current variant is <code>Struct</code>. If it is, it …","Creates an <code>f32</code> type","Creates a <code>Type</code> that models <code>f32</code>. Equivalent to …","Creates an <code>f64</code> type","Creates a <code>Type</code> that models <code>f64</code>. Equivalent to …","Creates a type modeling <code>fN</code> from a given type of float.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a struct type with a list of member types.","","","","","","","","","","Shorthand for creating an integer of width <code>16</code>. Exactly …","Creates a <code>Type</code> that models <code>i16</code>. Equivalent to <code>Type::int(16)</code>…","Shorthand for creating an integer of width <code>32</code>. Exactly …","Creates a <code>Type</code> that models <code>i32</code>. Equivalent to <code>Type::int(32)</code>…","Shorthand for creating an integer of width <code>64</code>. Exactly …","Creates a <code>Type</code> that models <code>i64</code>. Equivalent to <code>Type::int(64)</code>…","Shorthand for creating an integer of width <code>8</code>. Exactly …","Creates a <code>Type</code> that models <code>i8</code>. Equivalent to <code>Type::int(8)</code>.","Creates a new <code>iN</code> type. Equivalent to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if <code>self</code> is currently a <code>Array</code>.","Checks if <code>self</code> is currently a <code>Bool</code>.","Checks if the length of the array is zero.","Gets the members of the structure as a slice.","Checks if <code>self</code> is currently a <code>Float</code>.","Checks if the integer type has a width of 16.","Checks if the integer type has a width of 32.","Checks if the integer type has a width of 64.","Checks if the integer type has a width of 8.","Checks if <code>self</code> is currently a <code>Int</code>.","Checks if <code>self</code> is currently a <code>Ptr</code>.","Checks if <code>self</code> is currently a <code>Struct</code>.","The preferred way of getting both size and alignment data …","The preferred way of getting both size and alignment data …","Gets the length of the array, i.e. returns the <code>N</code> in <code>[T; N]</code>.","Gets the members of the structure as a slice.","Returns a mask with every usable bit in the type set. This …","Gets the members of the structure as a slice. An empty …","","","","","","","","","Creates an <code>Int</code> with a given width.","Creates an <code>fN</code> type from a given IEEE floating-point type","Creates a new <code>bool</code> type.","Creates a new <code>ptr</code> type.","Creates a new <code>[T; N]</code>. If <code>len</code> is zero, this type is …","Creates a struct type with a list of member types.","","","","","","","","","","Creates a new <code>ptr</code> type. Equivalent to …","Gets the underlying IEEE floating-point type from a given …","Returns a mask with the sign bit (MSB in 2’s complement) …","Gets the size of the type, in bytes.","Gets the exact size (in bytes) of the types. If the type …","Gets the exact size (in bytes) of the types. If the type …","Creates a new <code>{ T... }</code> type. Equivalent to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if the current variant is <code>Array</code>. If it is, it …","Checks if the current variant is <code>Bool</code>. If it is, it …","Checks if the current variant is <code>Float</code>. If it is, it …","Checks if the current variant is <code>Int</code>. If it is, it returns …","Checks if the current variant is <code>Ptr</code>. If it is, it returns …","Checks if the current variant is <code>Struct</code>. If it is, it …","Gets the width of the integer.","","","","","",""],"i":[0,0,0,1,0,1,0,2,1,0,0,0,1,0,3,3,1,0,2,1,0,0,0,4,5,5,1,1,4,3,2,6,7,8,9,10,1,4,3,2,6,7,8,9,10,1,4,3,2,6,7,8,9,10,1,4,3,2,6,7,8,9,10,1,4,3,2,6,7,8,9,10,1,9,10,1,4,3,2,6,7,8,9,10,1,1,1,1,1,1,1,1,1,1,1,1,1,6,1,6,1,1,4,3,2,6,7,8,9,10,1,4,3,2,6,7,8,9,10,1,10,4,3,2,6,7,8,9,10,1,3,1,3,1,3,1,3,1,1,4,3,2,6,7,8,9,10,1,1,1,9,10,1,3,3,3,3,1,1,1,5,5,9,10,3,10,4,3,6,7,8,9,10,1,3,6,7,8,9,10,4,3,2,6,7,8,9,10,1,1,6,3,4,5,5,1,4,3,2,6,7,8,9,10,1,4,3,2,6,7,8,9,10,1,4,3,2,6,7,8,9,10,1,4,3,2,6,7,8,9,10,1,1,1,1,1,1,1,3,11,12,13,14,15,16],"f":[[[["i32",0],["i32",0]],["i32",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u64",0]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[["type",4],["u64",0]]],[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["typelayout",3]],[[["",0]],["inttype",3]],[[["",0]],["ieeefloat",4]],[[["",0]],["floattype",3]],[[["",0]],["booltype",3]],[[["",0]],["ptrtype",3]],[[["",0]],["arraytype",3]],[[["",0]],["structtype",3]],[[["",0]],["type",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["typelayout",3]],["ordering",4]],[[["",0],["inttype",3]],["ordering",4]],[[["",0],["ieeefloat",4]],["ordering",4]],[[["",0],["floattype",3]],["ordering",4]],[[["",0],["booltype",3]],["ordering",4]],[[["",0],["ptrtype",3]],["ordering",4]],[[["",0],["arraytype",3]],["ordering",4]],[[["",0],["structtype",3]],["ordering",4]],[[["",0],["type",4]],["ordering",4]],[[["",0]],["type",4]],[[]],[[]],[[["",0],["typelayout",3]],["bool",0]],[[["",0],["inttype",3]],["bool",0]],[[["",0],["ieeefloat",4]],["bool",0]],[[["",0],["floattype",3]],["bool",0]],[[["",0],["booltype",3]],["bool",0]],[[["",0],["ptrtype",3]],["bool",0]],[[["",0],["arraytype",3]],["bool",0]],[[["",0],["structtype",3]],["bool",0]],[[["",0],["booltype",3]],["bool",0]],[[["",0],["floattype",3]],["bool",0]],[[["",0],["ptrtype",3]],["bool",0]],[[["",0],["arraytype",3]],["bool",0]],[[["",0],["type",4]],["bool",0]],[[["",0],["structtype",3]],["bool",0]],[[["",0],["inttype",3]],["bool",0]],[[["str",0]],["arraytype",3]],[[["str",0]],["booltype",3]],[[["str",0]],["floattype",3]],[[["str",0]],["inttype",3]],[[["str",0]],["ptrtype",3]],[[["str",0]],["structtype",3]],[[]],[[]],[[]],[[]],[[["ieeefloat",4]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["smallvec",3]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["option",4,[["typelayout",3]]]],[[["",0]],["option",4,[["typelayout",3]]]],[[["",0]],["u64",0]],[[["",0]],["usize",0]],[[],["u64",0]],[[["",0]]],[[["",0],["typelayout",3]],["bool",0]],[[["",0],["inttype",3]],["bool",0]],[[["",0],["floattype",3]],["bool",0]],[[["",0],["booltype",3]],["bool",0]],[[["",0],["ptrtype",3]],["bool",0]],[[["",0],["arraytype",3]],["bool",0]],[[["",0],["structtype",3]],["bool",0]],[[["",0],["type",4]],["bool",0]],[[["u32",0]]],[[["ieeefloat",4]]],[[]],[[]],[[["type",4],["u64",0]]],[[["intoiterator",8]]],[[["",0],["typelayout",3]],["option",4,[["ordering",4]]]],[[["",0],["inttype",3]],["option",4,[["ordering",4]]]],[[["",0],["ieeefloat",4]],["option",4,[["ordering",4]]]],[[["",0],["floattype",3]],["option",4,[["ordering",4]]]],[[["",0],["booltype",3]],["option",4,[["ordering",4]]]],[[["",0],["ptrtype",3]],["option",4,[["ordering",4]]]],[[["",0],["arraytype",3]],["option",4,[["ordering",4]]]],[[["",0],["structtype",3]],["option",4,[["ordering",4]]]],[[["",0],["type",4]],["option",4,[["ordering",4]]]],[[]],[[],["ieeefloat",4]],[[],["u64",0]],[[],["u64",0]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[["intoiterator",8]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["arraytype",3]],[[],["booltype",3]],[[],["floattype",3]],[[],["inttype",3]],[[],["ptrtype",3]],[[],["structtype",3]],[[],["u64",0]],null,null,null,null,null,null],"p":[[4,"Type"],[4,"IEEEFloat"],[3,"IntType"],[3,"TypeLayout"],[8,"IRType"],[3,"FloatType"],[3,"BoolType"],[3,"PtrType"],[3,"ArrayType"],[3,"StructType"],[13,"Bool"],[13,"Int"],[13,"Float"],[13,"Ptr"],[13,"Array"],[13,"Struct"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};